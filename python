What is python?
Python is a high-level, general-purpose and a very popular programming language. 
Python programming language (latest Python 3) is being used in web development, Machine Learning applications


There are two major Python versions: Python 2 and Python 3. Both are quite different.


Advantages :
1) Presence of third-party modules
2) Extensive support libraries(NumPy for numerical calculations, Pandas for data analytics etc)
3) Open source and community development
4) Easy to learn
5) User-friendly data structures
6) High-level language
7) Dynamically typed language(No need to mention data type based on value assigned, it takes data type)
8) Object-oriented language
9) Portable and Interactive
10) Portable across Operating systems


Variables:
 you will need to declare the type of variables but in Python you don’t need to do that. 
 Just type in the variable and when values will be given to it, then it will automatically know whether the value given would be an int, float, or char or even a String
 
 # Python program to declare variables 
myNumber = 3
print(myNumber) 

myNumber2 = 4.5
print(myNumber2) 

myNumber ="helloworld"
print(myNumber) 





Keywords in Python


In programming, a keyword is a “reserved word” by the language which convey a special meaning to the interpreter. It may be a command or a parameter. Keywords cannot be used as a variable name in the program snippet.

Keywords in Python:  Python language also reserves some of keywords that convey special meaning. Knowledge of these is necessary part of learning this language. Below is list of keywords registered by python .

False, elif, lambda,
None, else, nonlocal,
True, except, not,
and, finally, or,
as, for, pass,
assert, from, raise,
break, global, return,
class, if, try,
continue, import, while,
def, in, with,
del, is, yield,




Q>> How to check if a string is keyword?
----------------------------------------
Python in its language defines an inbuilt module “keyword” which handles certain operations related to keywords. A function “iskeyword()” checks if a string is keyword or not.
Returns true if a string is keyword, else returns false.



#Instead of writing this massive Python code 
#we can also code this in a different way 

#Python code to demonstrate working of iskeyword() 

# importing "keyword" for keyword operations 
import keyword 
import keyword 
# initializing strings for testing while putting them in an array 
keys = ["for", "while", "tanisha", "break", "sky", 
"elif", "assert", "pulkit", "lambda", "else", "sakshar"] 

for i in range(len(keys)): 
	# checking which are keywords 
	if keyword.iskeyword(keys[i]): 
		print(keys[i] + " is python keyword") 
	else: 
		print(keys[i] + " is not a python keyword") 


Q>> How to print list of all keywords?
--------------------------------------
function “kwlist()” is provided in “keyword” module which prints all the 33 python keywords
#Python code to demonstrate working of iskeyword() 

# importing "keyword" for keyword operations 
import keyword 

# printing all keywords at once using "kwlist()" 
print ("The list of keywords is : ") 
print (keyword.kwlist) 


Output:

The list of keywords is : 
['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 
'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 
'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 
'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 
'try', 'while', 'with', 'yield']


More on key words:

1. True : This keyword is used to represent a boolean true. If a statement is true, “True” is printed.

2. False : This keyword is used to represent a boolean false. If a statement is false, “False” is printed.
True and False in python are same as 1 and 0. Example:

3. None : This is a special constant used to denote a null value or a void. Its important to remember, 0, any empty container(e.g empty list) do not compute to None.


4. and : This a logical operator in python. “and” Return the first false value .if not found return last. The truth table for “and” is depicted below.
T-T-T//T-F-F//F-T-F//F-F-F

3 and 0 returns 0
3 and 10 returns 10
10 or 20 or 30 or 10 or 70 returns 10



5. or : This a logical operator in python. “or” Return the first True value.if not found return last.
T-T-T//T-F-T//F-T-T//F-F-F
3 or 0 returns 3
3 or 10 returns 3
0 or 0 or 3 or 10 or 0 returns 3


6. not : This logical operator inverts the truth value. The truth table for “not” is depicted below.
T-F//F-T


# Python code to demonstrate 
# True, False, None, and, or , not 

# showing that None is not equal to 0 
# prints False as its false. 
print (None == 0) 

# showing objective of None 
# two None value equated to None 
# here x and y both are null 
# hence true 
x = None
y = None
print (x == y) 

# showing logical operation 
# or (returns True) 
print (True or False) 

# showing logical operation 
# and (returns False) 
print (False and True) 

# showing logical operation 
# not (returns False) 
print (not True) 


7. assert : This function is used for debugging purposes. Usually used to check the correctness of code. If a statement evaluated to true, nothing happens,
but when it is false, “AssertionError” is raised . One can also print a message with the error, separated by a comma.


8. break : “break” is used to control the flow of the loop. The statement is used to break out of the loop and passes the control to the statement following 
immediately after loop.

9. continue : “continue” is also used to control the flow of code. The keyword skips the current iteration of the loop, but does not end the loop.

10. class : This keyword is used to declare user defined classes. For more info. click here.

11. def : This keyword is used to declare user defined functions. For more info. click here.

12. if : It is a control statement for decision making. Truth expression forces control to go in “if” statement block.

13. else : It is a control statement for decision making. False expression forces control to go in “else” statement block.

14. elif : It is a control statement for decision making. It is short for “else if”

if, else and elif conditional statements are explained in detail here article.

15. del : del is used to delete a reference to an object. Any variable or list value can be deleted using del.

# Python code to demonstrate 
# del and assert 

# initialising list 
a = [1, 2, 3] 

# printing list before deleting any value 
print ("The list before deleting any value") 
print (a) 

# using del to delete 2nd element of list 
del a[1] 

# printing list after deleting 2nd element 
print ("The list after deleting 2nd element") 
print (a) 

# demonstrating use of assert 
# prints AssertionError 
assert 5 < 3, "5 is not smaller than 3"



16. try : This keyword is used for exception handling, used to catch the errors in the code using the keyword except. 
Code in “try” block is checked, if there is any type of error, except block is executed.

17. except : As explained above, this works together with “try” to catch exceptions.

18. raise : Also used for exception handling to explicitly raise exceptions.

19. finally : No matter what is result of the “try” block, block termed “finally” is always executed. Detailed

20. for : This keyword is used to control flow and for looping.

21. while : Has a similar working like “for” , used to control flow and for looping.

22. pass : It is the null statement in python. Nothing happens when this is encountered. This is used to prevent indentation errors and used as a placeholder

23. import : This statement is used to include a particular module into current program.

24. from : Generally used with import, from is used to import particular functionality from the module imported.

25. as : This keyword is used to create the alias for the module imported. i.e giving a new name to the imported module.. E.g import math as mymath

26. lambda : This keyword is used to make inline returning functions with no statements allowed internally.

27. return : This keyword is used to return from the function. Detailed article –  Return values in Python.

28. yield : This keyword is used like return statement but is used to return a generator.

29. with : This keyword is used to wrap the execution of block of code within methods defined by context manager.This keyword is not used much in day to day programming.

30. in : This keyword is used to check if a container contains a value. This keyword is also used to loop through the container.

31. is : This keyword is used to test object identity, i.e to check if both the objects take same memory location or not.



# Python code to demonstrate working of 
# in and is 

# using "in" to check 
if 's' in 'geeksforgeeks': 
	print ("s is part of geeksforgeeks") 
else : print ("s is not part of geeksforgeeks") 

# using "in" to loop through 
for i in 'geeksforgeeks': 
	print (i,end=" ") 

print ("\r") 
	
# using is to check object identity 
# string is immutable( cannot be changed once alloted) 
# hence occupy same memory location 
print (' ' is ' ') 

# using is to check object identity 
# dictionary is mutable( can be changed once alloted) 
# hence occupy different memory location 
print ({} is {}) 

O/P
---
s is part of geeksforgeeks
g e e k s f o r g e e k s 
True
False
















